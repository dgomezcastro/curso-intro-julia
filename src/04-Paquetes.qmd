---
title: "![Julia](Material/Julia.svg)"
subtitle: "Entornos y paquetes"
author: "David Gómez-Castro"
format:
  html: 
    output-file: 04-EntornosPaquetes-apuntes.html
  clean-revealjs:
    output-file: 04-EntornosPaquetes-diapositivas.html
---

:::{.hidden}
```{julia}
using Pkg
Pkg.activate(".")
```
:::

# Entornos y paquetes: `Pkg.jl`

## Entornos

Julia permite trabajar, de manera nativa, crear entornos de trabajo con una selección de paquetes, eligiendo la versión de cada uno de ellos.

## Crear un entorno

Para crear un nuevo entorno en el directorio actual, entramos en modo `pkg`
```{bash}
(@v1.11) pkg> activate MiProyecto
```

hecho esto, el proyecto actual se verá reflejado en `pkg` mediante
```{bash}
(MiProyecto) pkg>
```

Si este entorno no existe en el directorio actual, se entenderá que es un projecto nuevo.

También lo podemos hacer desde el modo `julian` (por ejemplo si estamos en `jupyter`) usando
```{julia}
#| eval: false

import Pkg; Pkg.activate("MiProjecto")
```

Usando `"."` en lugar de `"MiProjecto"` creamos/activamos un entorno en el directorio actual (y usará el nombre de la carpeta actual).

--- 

Para saber qué entorno tenemos activo tenemos varias opciones:

- Si estamos en REPL, podemos pasar a modo `pkg` usando `]`
- En VSCode, el entorno de trabajo aparece en la barra inferior
- En modo `julian` (o en `jupyter`) podemos usar el comando 
```{julia}
#| eval: false
Base.active_project()
```

--- 

Por ahora esto no hemos causado ningún efecto en la carpeta. Esto cambia si añadimos un paquete.

```
(MiProyecto) pkg> add Example
```

Esto creará la carpeta `MiProyecto` en el directorio actual, y dentro de ella 
- `Project.toml` 

- `Manifest.toml`

Si queremos que el entorno se cree en la carpeta actual en lugar de uno nuevo, podemos usar `activate .`

La descripción de estos archivos en la [documentación](https://pkgdocs.julialang.org/v1/toml-files/).

Si alguien nos comparte un repositorio con un entorno, entonces podemos activarlo, e instalar las depencias con `instantiate`

## Crear un paquete

En `julia` es fácil crear nuevos paquetes utilizando `pkg`. 

Para crear un paquete llamado `HelloWorld` basta con indicar en modo `pkg`
```
(@v1.11) pkg> generate HelloWorld
```

. . .

Si ahora pasamos a modo shell podemos ver qué se ha generado
```{bash}
shell> tree
.
└── HelloWorld
    ├── Project.toml
    └── src
        └── HelloWorld.jl
```

Se han generado un paquete y un entorno. [Este es `HelloWorld.jl`]{.fragment}

. . .

```{julia filename="HelloWorld.jl"}
#| eval: false
#| output: false

module HelloWorld

greet() = print("Hello World!")

end # module HelloWorld
```

--- 

Para usar el paquete `HelloWorld` debemos estar en la carpeta y activar el entorno generado
```{bash}
shell> cd HelloWorld
(@v1.11) pkg> activate .
julia> using HelloWorld 
julia> HelloWorld.greet()
```

Si queremos que `greet()` se pueda utilizar sin `HelloWorld.`, debemos exportarlo añadiendo `export greet` al archivo `HelloWorld/HelloWorld.jl`.

# Algunos paquetes útiles para programación general

## [Test.jl](https://docs.julialang.org/en/v1/stdlib/Test/)

```{julia}
using Test
@test 1 == 1
```

. . .

```{julia}
@test 0 == 1
```

. . . 

```{julia}
@testset "Checking obvious things" begin
  @test 1 == 1
  @test 1^2 == 1
end
```

## Input Output (IO) 

Hay múltiples paquetes dentro de [`JuliaIO.jl`](https://github.com/JuliaIO)

## Variables de fecha y hora

[Dates.jl](https://docs.julialang.org/en/v1/stdlib/Dates/)
es parte de Standard Library 

[TimeZones.jl](https://github.com/JuliaTime/TimeZones.jl/)

El problema de zonas horarias es muy difícil [Vídeo de Computerphile](https://www.youtube.com/watch?v=-5wpm-gesOY)

##  FileIO.jl

> FileIO aims to provide a common framework for detecting file formats and dispatching to appropriate readers/writers. The two core functions in this package are called load and save, and offer high-level support for formatted files (in contrast with julia's low-level read and write). To avoid name conflicts, packages that provide support for standard file formats through functions named load and save are encouraged to register with FileIO.

## [JLD2.jl](https://github.com/JuliaIO/JLD2.jl) 

> JLD2 saves and loads Julia data structures in a format comprising a subset of HDF5, without any dependency on the HDF5 C library. JLD2 is able to read most HDF5 files created by other HDF5 implementations supporting HDF5 File Format Specification Version 3.0 (i.e. libhdf5 1.10 or later) and similarly those should be able to read the files that JLD2 produces. JLD2 provides read-only support for files created with the JLD package. 

## [JSON.jl](https://github.com/JuliaIO/JSON.jl)

Para gestionar archivos [JSON](https://en.wikipedia.org/wiki/JSON).

## [MAT.jl](https://github.com/JuliaIO/MAT.jl)

Para leer archivos de MATLAB.

# [JuliaData](https://github.com/JuliaData)

Data manipulation, storage, and I/O in Julia

## DataFrames.jl

> DataFrames.jl provides a set of tools for working with tabular data in Julia. Its design and functionality are similar to those of pandas (in Python) and data.frame, data.table and dplyr (in R), making it a great general purpose data science tool.

> DataFrames.jl plays a central role in the Julia Data ecosystem, and has tight integrations with a range of different libraries. DataFrames.jl isn't the only tool for working with tabular data in Julia – as noted below, there are some other great libraries for certain use-cases – but it provides great data wrangling functionality through a familiar interface.

--- 

```{julia}
using DataFrames
DataFrame()
```

. . .

```{julia}
DataFrame(A=1:3, B=5:7, fixed=1)
```

. . .

```{julia}
DataFrame("customer age" => [15, 20, 25],
                 "first name" => ["Rohit", "Rahul", "Akshat"])
```

. . .

```{julia}
dict = Dict("customer age" => [15, 20, 25],
                   "first name" => ["Rohit", "Rahul", "Akshat"])
```

[Más ejemplos](https://dataframes.juliadata.org/stable/man/basics/)

## Otros paquetes para tablas

[Tables.jl](https://github.com/JuliaData/Tables.jl)

[CSV.jl](https://github.com/JuliaData/CSV.jl)

[IndexedTables.jl](https://github.com/JuliaData/IndexedTables.jl)

[RData.jl](https://github.com/JuliaData/RData.jl)

## Barras de progreso con [ProgressMeter](https://github.com/timholy/ProgressMeter.jl)

```{julia}
using ProgressMeter

@showprogress 1 "Computing..." for i in 1:50
    sleep(0.1)
end
```

## [`BenchmarkTools.jl`](https://github.com/JuliaCI/BenchmarkTools.jl)

El macro `@time` calcula el tiempo que tarda en ejecutarse una orden. Debido a JIT es habitual que los tiempos de compilación se reduzcan si se ejecuta varias veces. 

Este paquete realiza múltiples ejecuciones del comando a cronometrar, y devuelve información estadística. 

## [DrWatson.jl](https://github.com/JuliaDynamics/DrWatson.jl)

Es un paquete de gestión de investigación científica. 

Permite organizar la versión de los paquetes, llevar orden de los casos simulados, y nombrar archivos de forma automática.