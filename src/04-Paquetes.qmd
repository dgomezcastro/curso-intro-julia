---
title: "![Julia](Material/Julia.svg)"
subtitle: "Algunos paquetes útiles"
author: "David Gómez-Castro"
format:
  clean-revealjs:
    output-file: 04-slides.html
---

:::{.hidden}
```{julia}
using Pkg
Pkg.activate(".")
```
:::

# [Plots.jl](https://docs.juliaplots.org/latest/)

## [Tutorial básico](https://docs.juliaplots.org/latest/tutorial/)

## Creando animaciones 

```{julia}
#| eval: false

using Plots 
anim = @animate for n=1:20
    plot( x-> sin(n*x) , label="")
end;

gif(anim, "animation.gif",  fps = 30)

mp4(anim, "video.mp4",  fps = 30)
```

--- 

En un notebook se puede hacer
```{julia}
using Plots
@gif for n=1:20
    plot( x-> sin(n*x) , label="" )
end
```

## Pintando polígonos

```{julia}
x,y =  [0.0, 0.5, 1.0],  [0.0, 1.0, 0.0]
plot(x[[1:end;1]] , y[[1:end; 1]], fill = 0)
```

## Otras librerías de representación

- [PyPlot.jl](https://github.com/JuliaPy/PyPlot.jl)

- [Makie.jl](https://github.com/MakieOrg/Makie.jl)

# Input Output (IO) 

Hay múltiples paquetes dentro de [`JuliaIO`](https://github.com/JuliaIO)

## Dictionarios

Para sacar datos a un archivo, es habitual crear un `Dictionary`
```{julia}
dict = Dict("mivariable" => 1, "b" => 2, "unvector" => [1,2,3], 1=>"mi variable aquí")
```

. . .

Se puede acceder al contenido como si fuese un vector
```{julia}
@show dict["unvector"]
```

## Variables de fecha y hora

[Dates.jl](https://docs.julialang.org/en/v1/stdlib/Dates/)
es parte de Standard Library 

[TimeZones.jl](https://github.com/JuliaTime/TimeZones.jl/)

El problema de zonas horarias es muy difícil [Vídeo de Computerphile](https://www.youtube.com/watch?v=-5wpm-gesOY)

##  FileIO.jl

> FileIO aims to provide a common framework for detecting file formats and dispatching to appropriate readers/writers. The two core functions in this package are called load and save, and offer high-level support for formatted files (in contrast with julia's low-level read and write). To avoid name conflicts, packages that provide support for standard file formats through functions named load and save are encouraged to register with FileIO.

## [JLD2.jl](https://github.com/JuliaIO/JLD2.jl) 

> JLD2 saves and loads Julia data structures in a format comprising a subset of HDF5, without any dependency on the HDF5 C library. JLD2 is able to read most HDF5 files created by other HDF5 implementations supporting HDF5 File Format Specification Version 3.0 (i.e. libhdf5 1.10 or later) and similarly those should be able to read the files that JLD2 produces. JLD2 provides read-only support for files created with the JLD package. 

## [JSON.jl](https://github.com/JuliaIO/JSON.jl)

Para gestionar archivos [JSON](https://en.wikipedia.org/wiki/JSON).

## [MAT.jl](https://github.com/JuliaIO/MAT.jl)

Para leer archivos de MATLAB.

# [JuliaData](https://github.com/JuliaData)

Data manipulation, storage, and I/O in Julia

## DataFrames.jl

> DataFrames.jl provides a set of tools for working with tabular data in Julia. Its design and functionality are similar to those of pandas (in Python) and data.frame, data.table and dplyr (in R), making it a great general purpose data science tool.

> DataFrames.jl plays a central role in the Julia Data ecosystem, and has tight integrations with a range of different libraries. DataFrames.jl isn't the only tool for working with tabular data in Julia – as noted below, there are some other great libraries for certain use-cases – but it provides great data wrangling functionality through a familiar interface.

--- 

```{julia}
#| output-location: column
using DataFrames
DataFrame()
```

. . .

```{julia}
#| output-location: column
DataFrame(A=1:3, B=5:7, fixed=1)
```

. . .

```{julia}
#| output-location: column
DataFrame("customer age" => [15, 20, 25],
                 "first name" => ["Rohit", "Rahul", "Akshat"])
```

. . .

```{julia}
#| output-location: column
dict = Dict("customer age" => [15, 20, 25],
                   "first name" => ["Rohit", "Rahul", "Akshat"])
```

[Más ejemplos](https://dataframes.juliadata.org/stable/man/basics/)

## Otros paquetes 

[Tables.jl](https://github.com/JuliaData/Tables.jl)

[CSV.jl](https://github.com/JuliaData/CSV.jl)

[IndexedTables.jl](https://github.com/JuliaData/IndexedTables.jl)

[RData.jl](https://github.com/JuliaData/RData.jl)

# LinearAlgebra.jl 

Es parte de `Standard Library`

## Operaciones básicas

```{julia}
#| output-location: column

using LinearAlgebra
A = [1 2 3; 4 1 6; 7 8 1]
```

```{julia}
#| output-location: column

@show tr(A)
@show det(A)
println("inv(A) = ")
inv(A)
```

. . .

La sintaxis para sistemas es la habitual
```{julia}
#| output-location: column
b = [1,2,3]
A \ b 
```

. . .


Y las descomposiciones
```{julia}
#| output-location: column

eigvals(A) 
```

## Factorizaciones {.scrollable}

[LU](LinearAlgebra.lu) permite exportar L, U y vector de permutaciones, o matriz de permutaciones
```{julia}
#| output-location: column

lu(A)
```

[SVD](https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/#LinearAlgebra.svd)
```{julia}
#| output-location: column

svd(A)
```

## Matrices especiales 

| Type | 	Description | 
|------|-----------------
|Symmetric|	Symmetric matrix|
|Hermitian|	Hermitian matrix|
|UpperTriangular|	Upper triangular matrix|
|UnitUpperTriangular|	Upper triangular matrix with unit diagonal|
|LowerTriangular|	Lower triangular matrix|
|UnitLowerTriangular|	Lower triangular matrix with unit diagonal|
|UpperHessenberg|	Upper Hessenberg matrix|
|Tridiagonal|	Tridiagonal matrix|
|SymTridiagonal|	Symmetric tridiagonal matrix|
|Bidiagonal|	Upper/lower bidiagonal matrix|
|Diagonal|	Diagonal matrix|
|UniformScaling|	Uniform scaling operator|

--- 

```{julia}
#| output-location: column
A = UnitUpperTriangular( [ 1 2 3 ; 1 2 3 ; 1 2 3 ] )
```

[Más sobre matrices especiales](https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/#Special-matrices)

# Estadística y teoría de la medida

[Random.jl](https://docs.julialang.org/en/v1/stdlib/Random/) es parte de `Standard Library`

```{julia}
using Random 
@show rand()
@show rand( (-1,2) )
@show rand(5:10);
```

. . .

[Statistics.jl](https://docs.julialang.org/en/v1/stdlib/Statistics/) es parte de Standard Library.

. . .

Es reseñable la familia [JuliaStats](https://juliastats.org/): DataFrames, Distributions, HypothesisTests, TimeSeries, ... 

## [Distributions.jl](https://juliastats.org/Distributions.jl/stable/)

The Distributions package provides a large collection of probabilistic distributions and related functions. Particularly, Distributions implements:

* Sampling from distributions
* Moments (e.g mean, variance, skewness, and kurtosis), entropy, and other properties
* Probability density/mass functions (pdf) and their logarithm (logpdf)
* Moment-generating functions and characteristic functions
* Maximum likelihood estimation
* Distribution composition and derived distributions (Cartesian product of distributions, truncated distributions, censored distributions)

--- 

```{julia}
using Random, Distributions
d = Normal()
d + 1.0
```

```{julia}
@show mean(d)
@show rand(d, 3)
```

```{julia}
x = [0, 0.4, -0.4] 
fit(Normal, x)
```


Ver también [MeasureTheory.jl](https://cscherrer.github.io/MeasureTheory.jl/stable/)


## [Turing.jl](https://turinglang.org/dev/docs/using-turing/)

> Turing is a general-purpose probabilistic programming language for robust, efficient Bayesian inference and decision making. Current features include:

|   * General-purpose probabilistic programming with an intuitive modelling interface;
|   * Robust, efficient Hamiltonian Monte Carlo (HMC) sampling for differentiable posterior distributions;
|   * Particle MCMC sampling for complex posterior distributions involving discrete variables and stochastic control flow; and
|   * Compositional inference via Gibbs sampling that combines particle MCMC, HMC and random-walk MH (RWMH).

[Un ejemplo sencillo](https://turinglang.org/dev/docs/using-turing/quick-start)

# Cálculo paralelo

En este curso no haremos hincapié en las capacidades y técnicas de Julia para hacer cálculo en paralelo. 

Para el cálculo paralelo en CPU se cuenta con `Distributed` en la Standard Library. Véase este [Tutorial](https://docs.julialang.org/en/v1/manual/distributed-computing/).

Para cálculo paralelo en GPU hay un conjunto de paquetes llamados [JuliaGPU](https://github.com/JuliaGPU): [Cuda.jl](https://cuda.juliagpu.org/stable/), AMDGPU.jl, Metal.jl, OpenCL.jl, ...

# Barras de progreso con [ProgressMeter](https://github.com/timholy/ProgressMeter.jl)

```{julia}
using ProgressMeter

@showprogress 1 "Computing..." for i in 1:50
    sleep(0.1)
end
```

. . .

```{julia}
using Distributed
using ProgressMeter

@showprogress @distributed for i in 1:10
    sleep(0.1)
end

```

# [DrWatson.jl](https://juliadynamics.github.io/DrWatson.jl/dev/)

Es un paquete de gestión de investigación científica. 

Permite organizar la versión de los paquetes, llevar orden de los casos simulados, y nombrar archivos de forma automática.