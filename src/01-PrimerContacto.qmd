---
title: "![Julia](Material/Julia.svg)"
subtitle: "¿Por qué? y ¿cómo?"

format:
    html: 
        output-file: 01-PrimerContacto-apuntes.html
    clean-revealjs:
        output-file: 01-PrimerContacto-diapositivas.html
---

{{< include _theme/activate.qmd >}}

# ¿Por qué julia?

## ¿Por qué Julia?

Artículo [*why we created Julia*](https://julialang.org/blog/2012/02/why-we-created-julia/)

- Es **código abierto**:

  todo está alojado en GitHub

. . .

- Es **reproducible**: 

  permite controlar todas las versiones de todos los paquetes

. . .

- Es **dinámica**: 

  utiliza tipos dinámicos, y la sintaxis es muy sencilla. 

. . .

- Es **componible**: 

  *multiple distach*

## Julia es rápido ([JIT](https://en.wikipedia.org/wiki/Just-in-time_compilation))

![](Material/benchmarks.svg){height=.75}

Eje vertical (tiempo del lenguaje) / (tiempo de ejecución en C)

[https://julialang.org/benchmarks/](https://julialang.org/benchmarks/)

## Comparación con MATLAB

La sintaxis para vectores y matrices veremos que es muy sencilla. 

```{julia}

A = [1 2 3; 4 5 6]
```

. . .

```{julia}

@show A[1, :];
```

. . .

| Función                 | Julia     | MATLAB        | 
|:------------------------|:------    |:----------    |
| Leer vector             | `x[i]`    |`x(i)`         |
| Leer fila de matriz     | `A[i,:]`  |`A(i,:)`       |
| Resolver sistema lineal | `A\b`     |`A\b`          |
| Funciones               | `f(x)=x^2`|`f = @(x) x^2` |

: Comparación de sintaxis vectorial

. . .

En [comparación con Python](https://pythonguides.com/python-numpy-matrix/)

# Instalación

En Linux/MacOS ejecute en una terminal
```{bash}
curl -fsSL https://install.julialang.org | sh
``` 

En Windows ejecute en una terminal
```{powershell}
winget install julia -s msstore
```

Más información e instaladores convencionales en la [web de `julia`](https://julialang.org/downloads/)

**Primera ejecución**

Al lanzar julia por primera vez veremos algo así:

![](Material/first-run.png)

# El REPL

Cuando lanzamos `julia` en terminal nos encontramos en el REPL (read-eval-print loop)

```{bash}
julia>
```

Aquí podemos introducir órdenes como las siguientes para obtener el resultado.

## Uso básico

Variables 
```{julia}
x = 2
```

. . .

Vectores
```{julia}
x = [1, 2]
```

. . .

Matrices 
```{julia}
A = [1 2]
B = [1 2; 3 4]
```

---

Lógica
```{julia}
if x == 1
    println("x es uno. Está solito.")
elseif x == 2
    println("x es dos. Mejor en pareja.")
else
    println("x es $x. ¡Qué decir!")
end
```

. . .

Bucles básicos
```{julia}
for i = 1:2
    println(i^2)
end
```

## Scripts

Los scripts de Julia son archivos `.jl`

. . . 

```{julia filename="MiCodigo.jl"}
#| eval: false
a = 1
a = a + 1
println("a=$a")
```
. . .

Ejecutamos en terminal de Unix (si julia está bien en el path)

```{bash}
$ julia MiCodigo.jl
"a=2"
```

. . . 

O desde dentro de julia

```{bash}
julia> include("MiCodigo.jl")
"a=2"
```

## Funciones

Podemos definir funciones de varios modos:

. . .

```{julia}
f(x) = x+1
f(1)
```

. . .

```{julia}
g = x -> x+2
g(1)
```

. . .

```{julia}
function h(x)
    return x + 3
end
h(1)
```

## Otro modos del REPL

El REPL tiene varios modos

| modo | terminal | uso | acceso |
|------|----------|-----|---------|
|julian |`julia>`| cálculos| |
|help|`help?>`| ayuda | `?` |
|shell|`shell>`|terminal del sistema|`;`
|pkg|`(@v1.11) pkg>`| gestión de paquetes | `]` |

[Documentación](https://docs.julialang.org/en/v1/stdlib/REPL/)

# IDEs

## [Visual Studio Code](https://code.visualstudio.com)

Para desarrollar código podemos usar [Visual Studio Code con Julia](https://www.julia-vscode.org). 

## Jupyter 

También podemos utilizar libretas [Jupyter](https://jupyter.org/install)

Para instalar `jupyter` introduzca en una terminal de `julia`
```{julia}
#| eval: false
using Pkg; Pkg.add("IJulia")
```

Para ejecutarlo
```{julia}
#| eval: false
using IJulia; notebook()
```

La primera vez pedirá instalar otros paquetes. Acepte introduciendo `y`.

# Paquetes

## ¿Qué son?

Las funcionalidades avanzadas se cargan con paquetes (Plots, ...)

. . .

Los paquetes están alojados en GitHub, donde suelen contar con amplia documentación: ejemplo [Plots.jl](https://github.com/JuliaPlots/Plots.jl)

. . .

Para usar un paquete debemos cargarlo, por ejemplo,
```{julia}
using Plots
```

. . .

Los paquetes deben añadidos en el entorno actual. Para añadirlos basta utilizamos el paquete `Pkg.jl` de la siguiente forma

```{julia}
#| eval: false
using Pkg;
Pkg.add("Plots");
```

---

```{julia}
using Plots
plot(x -> exp(x))
```

---

```{julia}
x = [0, 0.1, 1, 2]
y = exp.(x)

using Plots
plot(x, y)
```

## La magia de los macros

```{julia}

@gif for n = 1:20
    plot(x -> sin(n * x))
end
```

## La magia del código genérico

Para resolver una EDO podemos usar sintaxis similar a `ode45`

```{julia}
#| echo: true
g = 9.79 # Gravitational constant
L = 1.00 # Length of pendulum

u₀ = [0, π / 60] # Initial speed and angle
tspan = (0.0, 6.3) # Time span

# Define the problem
function pendulum(du, u, p, t)
    θ = u[1]
    dθ = u[2]
    du[1] = dθ
    du[2] = -(g / L) * θ
end

# Pass to solver
using DifferentialEquations
prob = ODEProblem(pendulum, u₀, tspan)
sol = solve(prob, Tsit5(), reltol=1e-6)

# Plot
using Plots
plot(sol.t, first.(sol.u), label="\\theta")
```

Tomado de *[The Unreasonable Effectiveness of Multiple Dispatch](https://www.youtube.com/watch?v=kc9HwsxE1OY)*

---

Sin modificar la librería `DifferentialEquations` podemos extenderla a otros "tipos de datos"

```{julia}
#| echo: true
using Measurements
g = 9.79 ± 0.02 # Gravitational constant
L = 1.00 ± 0.01 # Length of pendulum

u₀ = [0 ± 0.0, π / 60 ± 0.01] # Initial speed and angle
tspan = (0.0, 6.3) # Time span

# Define the problem
function pendulum(du, u, p, t)
    θ = u[1]
    dθ = u[2]
    du[1] = dθ
    du[2] = -(g / L) * θ
end

# Pass to solver
using DifferentialEquations
prob = ODEProblem(pendulum, u₀, tspan)
sol = solve(prob, Tsit5(), reltol=1e-6)

# Plot
using Plots
plot(sol.t, first.(sol.u), label="\\theta")
```

Tomado de *[The Unreasonable Effectiveness of Multiple Dispatch](https://www.youtube.com/watch?v=kc9HwsxE1OY)*